{
    "$schema": "./lyndasub_schema.json",
    "title": "D3.js Essential Training for Data Scientists",
    "chapters": [
        {
            "title": "Introduction",
            "sections": [
                {
                    "title": "Welcome",
                    "transcript": "- D3.js is a JavaScript library that lets you visualize data\r\n                    in a web browser with just a few lines of code.\r\n                    With D3 you're no longer confined to standard charts,\r\n                    such as bar charts, area charts, and line charts.\r\n                    You can build maps and network diagrams with D3,\r\n                    as well as histograms, scatter plots,\r\n                    or force-directed simulations,\r\n                    or you could create a completely new kind of graphic.\r\n                    I'm Emma Saunders, and I'm a freelance data consultant\r\n                    who specializes in data visualization.\r\n\t\t\n\t\t\n                    In this course, I'll introduce you to the basics\r\n                    of working with D3, and then I'll show you\r\n                    how to start small by building a line chart.\r\n                    Then we'll take a look at how to create shapes,\r\n                    and we'll explore how to connect a data source\r\n                    to our visualization.\r\n                    Then we'll have a look at some more advanced graphics,\r\n                    and we'll add some interactivity as well.\r\n                    I'll take you step-by-step\r\n                    through building up some visualizations\r\n                    so you can get going with your own projects.\r\n                    So let's get started."
                },
                {
                    "title": "Explaining D3",
                    "transcript": "- [Instructor] You're looking at what D3 can do\r\n                    D3 makes graphics within a webpage from data\r\n                    and animates them.\r\n                    This example takes share prices for four big companies\r\n                    and shows different ways of visualizing the same data.\r\n                    D3 is an abbreviation of Data-Driven Documents.\r\n                    In practical terms D3 is a JavaScript library.\r\n                    This means it's a pre-written JavaScript file,\r\n                    which allows easier development of certain applications\r\n                    than using JavaScript alone.\r\n                    Most of what you code in D3\r\n                    could be coded in plain javaScript,\r\n                    but it would take an enormous amount of JavaScript\r\n                    to do what D3 can do in a few lines.\r\n\t\t\n\t\t\n                    To use D3 in your code you must include\r\n                    the D3 file in your webpage.\r\n                    This file contains the D3 library\r\n                    it's about 16,000 lines long and 500 kilobytes in size\r\n                    Once you've pulled the D3 file into your webpage,\r\n                    you can use a set of new commands\r\n                    that you couldn't use in JavaScript alone.\r\n                    D3 is constantly being updated.\r\n                    It was released for the first time in 2011.\r\n                    At the end of June 2016\r\n                    a major version was released, Version 4.\r\n\t\t\n\t\t\n                    This course will teach you Version 4.\r\n                    It's important to take notes at the version and sub-version\r\n                    of your D3 file when looking at examples of documentation.\r\n                    Version 3 code won't work in Version 4 and vice versa.\r\n                    So examples that you find written\r\n                    for a different sub-version even might not work for you.\r\n                    One of the big changes between versions is that D3\r\n                    is modular in Version 4.\r\n                    In Version 3 there was a single file\r\n                    to pull into your webpage.\r\n                    In Version 4 you can still pull in a single file\r\n                    and this is what we're going to do in this course.\r\n\t\t\n\t\t\n                    But in the future if you were creating a map for example\r\n                    you might want to reduce your file size\r\n                    and just pull in the geographic module.\r\n                    The list of modules is here.\r\n                    Most of the source code examples and documentation you see\r\n                    will be for Version 3 or Version 4.\r\n                    You can tell them apart by looking at the name of the file.\r\n                    See here how it says v3.\r\n                    So this is a Version 3 file.\r\n                    In most of the examples we see later\r\n                    it says d3.v4\r\n                    You might notice here that the file name\r\n                    also contains the word min.\r\n\t\t\n\t\t\n                    There are two versions of D3 files\r\n                    the standard version and a compressed or min-ifed version\r\n                    that have the word min in their title.\r\n                    The files do exactly the same thing.\r\n                    The compressed file has simply had\r\n                    all its white space removed\r\n                    and as a result it's harder to read,\r\n                    should you need to look in there for something.\r\n                    In this course we will be using\r\n                    the standard non-compressed version but for Version 4.\r\n                    If you look at the top of the file\r\n                    you can see it says Version 4.2.1\r\n                    So 2.1 here is the sub-version I was referring to earlier."
                },
                {
                    "title": "What you need to know",
                    "transcript": "- [Instructor] You will find this course easier\r\n                    if you already know a bit of HTML, CSS, and JavaScript.\r\n                    D3 isn't a software, like Tableau or ClickView.\r\n                    There's no interface or drag-and-drop.\r\n                    There aren't any pre-defined charts, either.\r\n                    There are just shapes, lines, and text.\r\n                    To make a histogram in some languages,\r\n                    you'd call a histogram function.\r\n                    To make a histogram in D3,\r\n                    you create rectangles and axes yourself.\r\n                    This makes D3 really powerful,\r\n                    because you can combine rectangles, lines, and circles,\r\n                    to create completely new kinds of charts.\r\n\t\t\n\t\t\n                    You're not limited to a pre-defined set.\r\n                    If you can conceive of a graphic, you can create it in D3.\r\n                    To make a visualization in D3, you have to code it,\r\n                    format it, and publish it within a webpage.\r\n                    So you need to know the basics of creating\r\n                    and publishing a webpage, in order to use D3.\r\n                    We're going to go over the very basics of HTML\r\n                    and CSS as a refresher,\r\n                    but we do not teach these languages in this course.\r\n                    You will learn D3 quicker if you work alongside me,\r\n                    pausing and testing each step as we go.\r\n\t\t\n\t\t\n                    For this, you're going to need a piece of software\r\n                    called a text editor or code editor.\r\n                    I'll be using an editor called Atom.\r\n                    Atom is free, and it's available for Macs,\r\n                    Windows, and Linux.\r\n                    I recommend that you download this now.\r\n                    In order to preview our work, I'm going to be using Firefox,\r\n                    with an add-on called FireBug.\r\n                    This is FireBug at the bottom here.\r\n                    FireBug allows developers access to two crucial things:\r\n                    the JavaScript console, and a way to see the DOM tree.\r\n                    The console reports errors to you, and allows you\r\n                    to see inside the code as it's working.\r\n\t\t\n\t\t\n                    DOM is short for Document Object Model,\r\n                    and allows you to see all the elements of your webpage\r\n                    nested within each other.\r\n                    Sometimes you add 47 circles to the webpage,\r\n                    but you can't see them.\r\n                    In these cases, the DOM tree is usually\r\n                    the way to solve the mystery.\r\n                    If you choose to use a different text editor or browser,\r\n                    please ensure you can do these two things.\r\n                    They're crucial to developing in D3."
                },
                {
                    "title": "Using the exercise files",
                    "transcript": "- [Instructor] The exercise files for this course\r\n                    are arranged by chapter and video number.\r\n                    In each video I'll use a collection of files\r\n                    for small projects\r\n                    that will build up as we go along.\r\n                    I'll also show you a lot of links\r\n                    to interesting resources throughout the course,\r\n                    and I've collected these in a document\r\n                    to make it easier to open them up."
                }
            ]
        },
        {
            "title": "1. Refresher",
            "sections": [
                {
                    "title": "Introduction",
                    "transcript": "- [Instructor] As mentioned in the previous chapter,\r\n                    you'll find this course easier if you already know a bit\r\n                    of HTML, JavaScript, and CSS.\r\n                    In this chapter, we'll cover the basics of these languages\r\n                    to refresh your memory or point you in the right direction\r\n                    if you're a complete beginner.\r\n                    We also cover the importance of HTML5 and SVG\r\n                    and how D3 and JavaScript fit together.\r\n                    By the end of this chapter, you'll have downloaded D3\r\n                    and set up your text editor with the appropriate files,\r\n                    ready to start creating graphics."
                },
                {
                    "title": "Recalling HTML basics",
                    "transcript": "- [Instructor] First off, you need to know\r\n                    how a web page works.\r\n                    D3 creates graphics within a web page,\r\n                    so you can't have D3 without HTML.\r\n                    An HTML page can be edited in a text editor.\r\n                    Here we've got a text editor on the left,\r\n                    and a browser on the right.\r\n                    If the contents of the HTML file conform\r\n                    to a set of rules, browser software\r\n                    can interpret the contents, and transform your HTML code\r\n                    into a web page with images, tables and text.\r\n                    The basic rules of an HTML page are,\r\n                    DOCTYPE declaration, HTML tags,\r\n                    head tags, and body tags.\r\n\t\t\n\t\t\n                    \"Tag\" is a hidden key word contained within angle brackets,\r\n                    which tells the browser what to display,\r\n                    or how to display it.\r\n                    There are opening tags, which have angle brackets,\r\n                    and closing tags, which have angle brackets,\r\n                    and a forward slash.\r\n                    The closing tag tells the browser to end the element\r\n                    given by the opening tag.\r\n                    We also need a character set, and title,\r\n                    to make our page complete.\r\n                    Now technically in HTML5,\r\n                    you could omit some of these tags.\r\n                    But the structure is going to be useful for us\r\n                    within the course.\r\n\t\t\n\t\t\n                    So this is the smallest valid HTML file\r\n                    we're going to be working with.\r\n                    The head tags contain information about the page,\r\n                    and they're not shown in the browser.\r\n                    The body tags contain the bits we see, called elements.\r\n                    As our body tags on the left here have no content,\r\n                    the web page appears blank.\r\n                    When we add code in between the body tags,\r\n                    and view the file in a browser,\r\n                    the browser has to work out how to arrange the parts.\r\n                    It will draw the first element top left,\r\n                    and the browser will then draw following elements\r\n                    to the right and down.\r\n\t\t\n\t\t\n                    So web pages are always drawn by the browser\r\n                    from top left, to bottom right,\r\n                    following formatting rules that we supply,\r\n                    plus their own assumptions.\r\n                    Different browsers, such as Chrome and Firefox,\r\n                    often apply slightly different rules,\r\n                    and therefore display elements differently,\r\n                    much to the annoyance of web developers.\r\n                    Now we've added some content to our body tags.\r\n                    We've got \"p tags\", which means paragraph.\r\n                    And then we've got some \"div tags\", which means division.\r\n                    HTML elements fall into two categories,\r\n                    block, and inline.\r\n\t\t\n\t\t\n                    Some elements can take either form,\r\n                    but all elements default to one or the other.\r\n                    Block elements take up a rectangular area within the page,\r\n                    and include things like images, tables,\r\n                    paragraphs, and divs.\r\n                    Block elements always start on a new line,\r\n                    and default to taking up the full width available.\r\n                    Inline elements occur within a block of text,\r\n                    usually a paragraph, and include things\r\n                    like hyperlinks and spans.\r\n                    Inline elements don't start on a new line,\r\n                    and they only take up as much space as necessary.\r\n\t\t\n\t\t\n                    You can see here that we've placed p tags, a paragraph,\r\n                    at the top of our page,\r\n                    i.e., as the first set of tags within the body tags.\r\n                    Paragraph is a block element, so those four lines\r\n                    on the right, taken together,\r\n                    take up a rectangular space in the browser window.\r\n                    You see that the small red box is covering part of the text.\r\n                    Let's say we formatted our span element,\r\n                    so that it highlights a word in red.\r\n                    We don't need to give any position or size information\r\n                    to place this red box.\r\n                    The browser works it out when it types out the text.\r\n\t\t\n\t\t\n                    So, if we were to double the font size,\r\n                    the red shading would still appear around the correct word.\r\n                    This is true of all inline elements.\r\n                    Looking at the text editor again,\r\n                    you can see that we've placed number of block elements\r\n                    under the paragraph.\r\n                    In this case, we have five divs.\r\n                    Each div is a block element.\r\n                    With no formatting, these divs have used default settings,\r\n                    and scaled to the height of their contents,\r\n                    and the full width of the page.\r\n                    We can change the width and position of block elements\r\n                    to produce any kind of layout.\r\n\t\t\n\t\t\n                    With formatting, not shown here,\r\n                    we use the same HTML\r\n                    to produce a different layout for our divs,\r\n                    making the blocks different sizes,\r\n                    and arranging them in different locations.\r\n                    These concepts will become important shortly,\r\n                    when we start looking an HTML element called SVG.\r\n                    You can't create a D3 graphic,\r\n                    without an SVG element."
                },
                {
                    "title": "Understanding HTML5",
                    "transcript": "- [Instructor] HTML5 is the latest version of HTML.\u2026Languages have versions, just as software and hardware do.\u2026Most of us are familiar with hardware versions,\u2026such as an iPhone 6, and software versions, such as iOS 9.\u2026World programming languages have versions too,\u2026and as with hardware, the latest version\u2026can typically do more than its predecessor.\u2026When a new language versions comes out,\u2026the changes are often small,\u2026but when HTML5 was released in 2014, everything changed.\u2026HTML5 is an enormous upgrade on HTML4.\u2026\t\t\n\t\t\nWith HTML5, the coder can place a video\u2026directly within a web page,\u2026rather than needing another software, such as Flash,\u2026to allow the user to play the movie, same for audio.\u2026For our purposes, the big innovation is that HTML5\u2026allows us to embed Scalable Vector Graphics, or SVG,\u2026directly into our web page.\u2026This in turn, allows us to create graphical elements,\u2026such as circles, and assign them X Y coordinates,\u2026down to the last pixel.\u2026The implication of this is that D3 requires HTML5 support.\u2026\t\t\n\t\t\nIt's important you understand, not everyone has downloaded\u2026"
                },
                {
                    "title": "Introducing SVG",
                    "transcript": "- [Female Narrator] Remember that we looked at block\u2026and inline elements earlier.\u2026While during this course, and generally within D3,\u2026we treat SVG as a block element, meaning it takes\u2026a rectangular space on the page.\u2026It's best to think of SVG as a blank canvas\u2026for us to draw on.\u2026On the left, in the text editor, we're showing SVG tags.\u2026SVG stands for scalable vector graphic,\u2026which I'll explain shortly.\u2026An SVG is always the first and largest element\u2026of any D3 graphic.\u2026You can't have a D3 graphic without an SVG\u2026container to put it in.\u2026\t\t\n\t\t\nThe SVG can sit directly within the body tags\u2026or within another element such as a div.\u2026It's quite un-fussy about where it sits,\u2026but it is very fussy about what goes inside it.\u2026You can't put a div or table or paragraph\u2026inside an SVG, for example.\u2026It's not a normal HTML element.\u2026An SVG is a graphical element, and it can only\u2026contain graphical items, such as rectangles,\u2026lines, and circles.\u2026SVG can contain text too,\u2026but not within a paragraph element.\u2026D3 adds graphics and text to an SVG element\u2026"
                },
                {
                    "title": "Recalling CSS",
                    "transcript": "- [Narrator] CSS stands for 'Cascading Style Sheets'.\u2026Style sheets contain the formatting, or styles,\u2026for HTML elements.\u2026Things like height, width, fill, or border.\u2026In the style sheet we define a circle as red or blue,\u2026or define a div as full width or half width.\u2026It makes quite a difference, as you can see.\u2026Cascading tells us that if we've defined\u2026two conflicting styles for the same element,\u2026the more specific definition will take precedence.\u2026CSS can appear in one of two locations.\u2026\t\t\n\t\t\nEither within the HTML document\u2026or as a separate .css document.\u2026This is called internal and external CSS respectively.\u2026Here we have internal CSS, with style tags within the head.\u2026The formatting's all here,\u2026tells our browser that div elements\u2026should be treated as block elements,\u2026and that they should sit as far to the left as they can.\u2026Now we have external CSS.\u2026The head tags contain links which pull in style.css\u2026to our web page.\u2026You can see style.css is now shown\u2026behind our HTML page on the left.\u2026\t\t\n\t\t\nSo now our web page relies upon a second file to work.\u2026"
                },
                {
                    "title": "Combining Javascript and D3",
                    "transcript": "- [Instructor] If you have text editor,\u2026and you're planning to work alongside me during this course,\u2026now is a good time to download D3.\u2026Your text editor so far should look like this,\u2026with a d3.html page and style.css.\u2026Create a New File in Atom\u2026and save it as d3.v4.js.\u2026Js is the extension for Javascript.\u2026Now you need to go to your browser.\u2026Head to a URL which is d3js.org/d3.v4.js\u2026and copy the contents of the page.\u2026\t\t\n\t\t\nYou can do this without any scrolling\u2026by going Edit Select All\u2026or by pressing Control A\u2026or Command A if you are on a Mac.\u2026Then just copy and paste into your new file in Atom.\u2026And Save.\u2026And there you have D3.\u2026You don't need to download D3 in the future by the way.\u2026Many people just reference the URL from their code,\u2026but I like to be able to work offline.\u2026So now you have an html page,\u2026a CSS page, and D3.\u2026We need one more file before we can begin.\u2026You're going to need another Javascript file\u2026to contain the D3 code you will write.\u2026\t\t\n\t\t\nCreate a New File and call it shapes.js.\u2026For now it can be blank.\u2026Now you have four files, an html page, a css file,\u2026"
                },
                {
                    "title": "Understanding the DOM and the console",
                    "transcript": "- [Instructor] Before you start coding in D3,\u2026you need to know how to use the DOM,\u2026or Document Object Model.\u2026The DOM is nothing to do with D3.\u2026It describes all the HTML elements,\u2026but checking the DOM becomes an important way\u2026to check your D3 code.\u2026HTML code is written with HTML tags, as we know.\u2026There's an opening tag at the top of the page\u2026and a closing tag, which has forward slash,\u2026at the bottom of the page.\u2026Same for head, same for body.\u2026If we create a table element, we have opening\u2026and closing tags as well.\u2026Then we have five rows, the tr tag,\u2026each containing two cells given by the td tag.\u2026\t\t\n\t\t\nNote that some elements such as td or cell\u2026are within other elements such as tr or row.\u2026They are entirely enclosed.\u2026That is to say, the opening and closing tag\u2026of the td element is within the opening and closing tag\u2026of the tr element.\u2026Similarly, the tr elements are entirely enclosed\u2026within table, and in turn the table element\u2026is entirely enclosed within the body tag\u2026which is enclosed within the HTML tags.\u2026Another way of describing this is to say that these HTML\u2026"
                }
            ]
        },
        {
            "title": "2. Making a Simple Bar Chart with D3",
            "sections": [
                {
                    "title": "Introduction",
                    "transcript": "- [Instructor] In this chapter,\r\n                    we're going to create a basic bar chart with D3\r\n                    and spend time understanding\r\n                    what's going on behind the scenes.\r\n                    We'll learn how to format the chart\r\n                    and add axes and titles in later chapters.\r\n                    As covered in the previous chapter,\r\n                    you're going to need a CSS file called style.css,\r\n                    and it should have about that in it.\r\n                    You need a blank JavaScript file called shapes.js,\r\n                    your D3 code should be in a file called d3.v4.js,\r\n                    which isn't shown here.\r\n                    And you need a valid HTML page called d3.html,\r\n                    which references the other three files\r\n                    in the correct order and location."
                },
                {
                    "title": "Adding an SVG",
                    "transcript": "- [Instructor] The place to start\u2026is your javascript document, shapes.js.\u2026The first thing we need to do is create some data.\u2026Let's create a data array, var dataArray\u2026and we'll put some numbers in it, five, 11 and 18,\u2026and round that off with a semicolon.\u2026This bit's regular javascript, not d3.\u2026The next thing we're going to do is\u2026add an SVG element to our HTML page.\u2026The SVG can be thought of as a canvas,\u2026to which we add all our shapes and text\u2026as discussed in chapter one.\u2026\t\t\n\t\t\nThe basic method with d3 is to select an element\u2026that already exists in the dom,\u2026and add or append a new element to it.\u2026For now we don't have any elements within the body tags.\u2026So we're going to append to the body itself.\u2026To do this type d3.select(\"body\").append(\"svg\").\u2026Give that a semicolon and save it.\u2026So now you need to go to Firefox and\u2026load up your d3.html page.\u2026The first thing we're gonna do is\u2026check the dom for our SVG element.\u2026\t\t\n\t\t\nSo we go HTML, <body>, and there we have an SVG element.\u2026So far, so good.\u2026Now we're going to set a width and height for the SVG.\u2026"
                },
                {
                    "title": "Adding rectangles",
                    "transcript": "- [Narrator] Now we're gonna make our lives easier\u2026by creating a shortcut.\u2026Let's create a variable to refer to our SVG\u2026and we'll call it SVG.\u2026And pop that back to one line\u2026just so that we're making a bit better use of the space.\u2026When we use the SVG variable,\u2026it's not going to run the append code again\u2026or reset the height and width.\u2026SVG when we use it from now on just refers\u2026to the SVG element that's been added to the HTML.\u2026So, now we're gonna add some rectangles to our SVG.\u2026SVG.selectAll(\"rect\").\u2026\t\t\n\t\t\nAnd rect means rectangle, as you may have guessed.\u2026.data(dataArray)\u2026.enter().append()\u2026Append is gonna be \"rect\" as well.\u2026And in fact, for now, that's the lot.\u2026People always find this phrasing confusing to begin with.\u2026So we begin by selecting the rectangles,\u2026but we haven't added any rectangles yet.\u2026So, people always ask, quite legitimately,\u2026\"How can I select something I haven't added?\"\u2026The next section is dedicated to explaining this code\u2026after we've added a few more lines to it,\u2026so don't worry if you don't get it the first time.\u2026"
                },
                {
                    "title": "Setting attributes for shapes",
                    "transcript": "- [Instructor] All SVG elements,\u2026such as rectangles and circles,\u2026require a basic set of attributes.\u2026These differ by element.\u2026A circle, for example,\u2026must have x y coordinates and a radius\u2026or it simply will not appear on the page.\u2026For a rectangle,\u2026we need x, y, width and height as a minimum.\u2026We could also use rx and ry for rounded corners\u2026but we're not gonna use that now.\u2026Those attributes are optional.\u2026Let's add some mandatory attributes to our rectangles here.\u2026Delete the semi-colon and then dot attr for attribute.\u2026\t\t\n\t\t\nAnd the first parameter tells the three\u2026what we want to change.\u2026And the second parameter changes it to a value.\u2026And I'm gonna copy that and paste it four times\u2026because I've got four attributes.\u2026Then we're gonna have\u2026height, width, x and y as our attributes.\u2026For the rectangles, let's give them a height of 200.\u2026And the browser, incidentally, will assume we mean pixels.\u2026And give it a width of 50,\u2026x value of 20, and y value of 100.\u2026Save that.\u2026\t\t\n\t\t\nGo to Firefox and there we have a bar.\u2026Now you may have been expecting three bars,\u2026"
                },
                {
                    "title": "Seeing the code how the browser sees it",
                    "transcript": "- [Instructor] So now we have a valid chunk of code.\u2026We're going to walk through it.\u2026This part is simply to understand what's happening,\u2026so you can put your pen down,\u2026or your keyboard away, if you like.\u2026You see the screen is split in three.\u2026On the left is our code.\u2026It's been reformatted from when we saw it\u2026in the text because the functions have been split\u2026into several lines to save space.\u2026But it is the same code that we just saw.\u2026In the middle section are the resources, or inputs\u2026the browser has at its disposal.\u2026D3 makes use of the SVG shape library, which is defined\u2026and managed by the people who manage the HTML language.\u2026\t\t\n\t\t\nSo you can add all of these shapes to a webpage\u2026with no D3 at all.\u2026SVG's predefined shapes are circle, rectangle,\u2026ellipse, line, polyline, and polygon.\u2026The other input we've given the browser is dataArray,\u2026which we've defined in our JavaScript code.\u2026As we saw in the last section, by convention,\u2026dataArray is accessed using d and i.\u2026We think of d as data point, and i as index.\u2026The data points are five, 11, and 18 from our array.\u2026"
                }
            ]
        },
        {
            "title": "3. Basic Shapes, Courtesy of SVG",
            "sections": [
                {
                    "title": "Introducing SVG shapes",
                    "transcript": "- [Instructor] In the previous chapter,\r\n                    we saw how to add rectangles, and learned that\r\n                    the mandatory attributes for rectangles\r\n                    are x, y, width, and height.\r\n                    There are several other shapes available to you\r\n                    when you use D3, and each has a different\r\n                    set of mandatory attributes.\r\n                    You can see in the left-hand column\r\n                    that the rectangle element requires x, y, width, and height,\r\n                    the attributes in blue.\r\n                    Other attributes, given in gray, are optional.\r\n                    Moving on, we have circle,\r\n                    which has cx, cy, and r for radius.\r\n                    Then we have ellipse, with cx, cy, and an x and y radius.\r\n\t\t\n\t\t\n                    Lines have x,y for start point and x,y for end point.\r\n                    Text requires just x and y, and path requires data.\r\n                    In all these cases, x and y values\r\n                    will default to zero if they are not set,\r\n                    but some shapes, such as lines,\r\n                    won't show up unless you've styled them,\r\n                    either through JavaScript, or in CSS.\r\n                    The shapes you see in front of you\r\n                    aren't peculiar to D3.\r\n                    They are SVG shapes, defined by the people\r\n                    who look after HTML.\r\n                    You could add them manually to your webpage if you wanted,\r\n                    with D3 nowhere in sight.\r\n\t\t\n\t\t\n                    D3 just allows you to add the shapes dynamically,\r\n                    based on data.\r\n                    Adding 2,000 shapes manually would be 2,000 lines of code.\r\n                    Adding 2,000 shapes with D3 is one line of code.\r\n                    There are eight basic SVG shape elements.\r\n                    They are rectangle, circle, ellipse, line,\r\n                    polyline, polygon, path, and text.\r\n                    D3 coders don't generally use polygon or polyline,\r\n                    because it's quicker to use path.\r\n                    That's where they're not shown up here.\r\n                    While we're on the subject, path is a kind of line,\r\n                    which can be wiggly or straight, open or closed.\r\n\t\t\n\t\t\n                    With path, you can step beyond triangles and hexagons,\r\n                    and draw the human body, or a flower, if you like.\r\n                    In the rest of this chapter,\r\n                    we're going to look at each of these elements in turn."
                },
                {
                    "title": "Drawing circles",
                    "transcript": "- [Narrator] Now let's add some circles.\u2026We're gonna add one circle for each data point\u2026using the same array as before, data array.\u2026We're going to add the circles in a horizontal line\u2026making them bigger or smaller, depending on the data.\u2026We use the same SVG again, in fact,\u2026we can just copy and paste the first three lines,\u2026so let's copy that, and then Atom gives us\u2026some weird indentation which I'm gonna remove.\u2026Give that a new line, and we just change\u2026rect into circle.\u2026Circles have three mandatory attributes,\u2026so I'm gonna add three placeholders here.\u2026\t\t\n\t\t\nThis indentation that I'm doing here\u2026is just convention, because it shows me\u2026that the attributes relate to the circle.\u2026That's why I line then up under the circle\u2026but you don't have to do that if that doesn't work for you.\u2026Finish that off with a semicolon.\u2026So, the mandatory attributes here are cx, cy, and r.\u2026I think of cx and cy as the x and y coordinates\u2026of the center of the circle.\u2026I don't know if that's what Mike Bostock\u2026had in mind when he used the word c,\u2026but that's how I remember it.\u2026"
                },
                {
                    "title": "Drawing ellipses",
                    "transcript": "- [Instructor] Now for an ellipse.\u2026An ellipse is an oval shape,\u2026symmetrical horizontally and vertically.\u2026It's not an egg shape.\u2026An ellipse has four mandatory attributes in D3:\u2026Cx and Cy, which position the center of the shape,\u2026and Rx and Ry.\u2026Rx is the horizontal radius and Ry is the vertical radius.\u2026Let's start by copying the circle code\u2026and changing newX to 600.\u2026So I just copied that, and you can see\u2026that that has indented weirdly, so let's remove that.\u2026\t\t\n\t\t\nAnd change newX to 600 and save.\u2026So now you'd think if we checked Firefox,\u2026we ought to be able to see six circles, right?\u2026'Cause we've got two batches of code adding circles.\u2026But I've just gone to Firefox and refreshed,\u2026and I can still only see three.\u2026And if I look for them in the DOM,\u2026which is always the first port of call,\u2026you can see there's only three been added,\u2026the three that we had before.\u2026They're not even added as sort of semi elements,\u2026as we might expect.\u2026So let's have a look at what's going on here.\u2026Let's bring this up a bit.\u2026In this line of code here,\u2026"
                },
                {
                    "title": "Drawing lines",
                    "transcript": "- You might think a line needs no introduction,\u2026but an SVG line has a specific definition.\u2026A line in SVG is a straight line only,\u2026starting at one point, and ending at another.\u2026It is not curved or wiggly, and it does not have\u2026different sections going at different angles.\u2026That is a polyline in SVG terms.\u2026A line can go at any angle, though,\u2026it doesn't need to be horizontal or vertical.\u2026The line shape has four mandatory attributes:\u2026X1 and Y1, X2 and Y2.\u2026The first pair set the start position,\u2026and the second pair set the end position.\u2026\t\t\n\t\t\nWe're going to add three horizontal lines,\u2026with the data determining their width.\u2026You could have the data determine the thickness,\u2026or the angle, or the strength of color, if you prefer.\u2026So let's copy and paste the previous code,\u2026replacing ellipse with line.\u2026And I copy that,\u2026and paste it,\u2026and then change the indentation.\u2026Change newX to 900, ellipse to line.\u2026And we can remove this class here,\u2026because there aren't any other lines on the page,\u2026so the browser's not going to get confused.\u2026\t\t\n\t\t\nSo these attributes down here we need to change,\u2026"
                },
                {
                    "title": "Rejecting polygons and polylines",
                    "transcript": "- [Instructor] A polygon is a closed shape\u2026formed of connected straight lines.\u2026Triangles are polygons as are hexagons,\u2026star shapes, and dodecahedrons.\u2026A polyline is an open ended shape\u2026formed of connected straight lines.\u2026Both types of SVG shape can be added in D3,\u2026but it's usually quicker to use Path,\u2026which we're going to come on to.\u2026I've never used polygon or polyline in D3,\u2026and I've never seen anyone who has,\u2026but I wanted you to know that they are options.\u2026"
                },
                {
                    "title": "Adding text",
                    "transcript": "- [Instructor] In theory, all you need to add text\u2026to your SVG is the text itself\u2026because browsers default thex and y coordinates to zero.\u2026So let's do that now.\u2026Svg.append(\"text\").\u2026Now, to actually set what's inside the text,\u2026we use .text rather than .attribute,\u2026and we can set the text to hello world!,\u2026as that is tradition, I think,\u2026and then go back to Firefox and refresh.\u2026And we cannot see anything.\u2026You may be spotting a theme here.\u2026\t\t\n\t\t\nOften when you're writing with D3 code,\u2026you add an element and can't see it,\u2026and as I've mentioned, the first thing to do\u2026is check for DOM.\u2026So there we go.\u2026We have got a text.\u2026And if you can see in the very top left corner of the screen\u2026when I'm hovering on that,\u2026there's a little blue rectangle up there.\u2026Now, what's happened is that the text has been added\u2026at coordinates of zero, zero because we didn't specify them\u2026to be anything different.\u2026When we positioned a rectangle earlier,\u2026the x and the y coordinates affected the top left\u2026of the rectangle, and with the circle,\u2026the x and the y coordinates worked\u2026"
                }
            ]
        },
        {
            "title": "4. Advanced Shapes, with D3 and Path",
            "sections": [
                {
                    "title": "Introducing path",
                    "transcript": "- [Narrator] Path is a big deal in D3.\u2026A path is a line, essentially.\u2026It can be wiggly, or straight, and it can be open,\u2026such as in a line chart, or closed, as in an area chart.\u2026Paths can be filled, and they can make\u2026unusual, irregular shapes.\u2026Paths are crucial for making advanced graphics in D3.\u2026In this chapter, we're going to learn how to use path\u2026to add a shape that serves as an area chart,\u2026albeit one without axes.\u2026To create a path, we need to use something called\u2026a generator, so we'll take a look at those too.\u2026\t\t\n\t\t\nAnd I'll introduce you to groups,\u2026which are fundamental to making advanced graphics in D3.\u2026In chapter three, we looked at SVG shapes,\u2026which each have a set of mandatory attributes.\u2026For line, they were X1, Y1, and X2, Y2.\u2026Paths work differently.\u2026A path might contain 2000 points,\u2026so we can list them all out as attributes.\u2026Path takes one single attribute, D, or data.\u2026The data have to be presented in a particular way,\u2026as a string of x,y coordinates, separated by spaces.\u2026\t\t\n\t\t\nThe first letter here, M, means move to.\u2026"
                },
                {
                    "title": "Explaining generators",
                    "transcript": "- [Presenter] So far\u2026we've created the path attribute manually\u2026starting with M and using L and x, y coordinates\u2026to move from point to point with five data points\u2026that's fine but with time serious data in particular\u2026we can easily have thousands of points.\u2026D3 offers us various generators,\u2026which create familiar sounding shapes and charts.\u2026For example, there is an area generator\u2026which turns data into a wiggly shape\u2026running left to right closed off with vertical lines\u2026and a horizontal line to the bottom.\u2026\t\t\n\t\t\nThe area generator\u2026draws these extra lines for us automatically using path.\u2026We're going to start with the line generator.\u2026Create a new file and save it as interpolate.js\u2026and now you can close shapes.js.\u2026Now we need to update d3.html\u2026to reference our new JavaScript file.\u2026So to do that\u2026we just delete shapes and type in interpolate and save.\u2026So now we've got a nice blank file.\u2026We need to declare a variable data array\u2026to contain some data.\u2026\t\t\n\t\t\nSo var dataArray = square brackets.\u2026Square brackets means array in JavaScript.\u2026This time we're going to put five objects into our array.\u2026"
                },
                {
                    "title": "Drawing an area chart",
                    "transcript": "- [Instructor] Day three contains\u2026several generators in addition to line,\u2026including area, arc, cord and symbol.\u2026Let's create an area chart using the area generator.\u2026Unlike the line generator, the area generator\u2026produces a closed shape, i.e. one that can be filled.\u2026Take a new javascript sheet,\u2026and save it as area.js\u2026Now we need to re-reference our d3.html file like so,\u2026save that, declare a variable dataArray\u2026and we're gonna fill it with 17 random numbers.\u2026\t\t\n\t\t\nNow they're not actually that random in my case\u2026because, as you can see, they're all going up, but you can\u2026be a bit more experimental with yours if you like,\u2026and the reason for using 17 of them\u2026will become clear in a moment.\u2026You can copy mine or use your own.\u2026Alright, I think that's about 17.\u2026Next we're gonna declare another variable,\u2026and we're gonna call it dataYears, var dataYears is array,\u2026and this time we're gonna fill it with years.\u2026\t\t\n\t\t\nWe're gonna start at 2000 and increment,\u2026and there we have it, that's why\u2026we wanted 17 data points above\u2026because we're gonna have dates that\u2026"
                },
                {
                    "title": "Finding other generators",
                    "transcript": "- [Narrator] So far, we've looked at the Line Generator\u2026and the area generator.\u2026But actually, there's almost 20 Generators at the moment\u2026and the number is growing all the time.\u2026So I want to show you how you would find out more about\u2026some of those other generators.\u2026The first place to start, always, is the API, for d3.\u2026As you can see up here.\u2026Do make sure when you Google for the API\u2026that you click on the right one,\u2026because version three is very prominent at the moment.\u2026And you want version four.\u2026So if it says in this URL up here,\u2026if it mentions version at all,\u2026then you're on a version prior to version four.\u2026\t\t\n\t\t\nThe fact that this one doesn't mention version\u2026means we're on the latest one.\u2026Now a good trick with the API\u2026is just to use the Find button,\u2026so COMMAND + F or CRL + F if you're on Windows.\u2026And then we can look for something like \"generator\",\u2026here's one I made earlier.\u2026And you can see straight away that\u2026there are 19 matches for them.\u2026There's a histogram one, several for axis,\u2026which we will be coming onto,\u2026and all sorts of other layouts,\u2026"
                },
                {
                    "title": "Introducing groups",
                    "transcript": "- [Instructor] Earlier I mentioned that you can't add text\u2026to a rectangle or indeed any shape\u2026to any other shape in an SVG.\u2026This is the opposite of standard HTML where pretty much\u2026any element can go inside another.\u2026You can put a table in a div, you can put a div in a table.\u2026Now there are some exceptions to this, to be precise,\u2026one and a half exceptions.\u2026The half is that, as we've already seen,\u2026tspan elements can go inside a text element.\u2026The big exception is groups.\u2026You can add anything you like to a group\u2026including other groups.\u2026\t\t\n\t\t\nNow group elements don't show up on the web page themselves,\u2026you can't style them or put a board around them.\u2026They're conceptual really.\u2026But you can move them and rotate them which will\u2026move and rotate their contents,\u2026so they certainly have tangible effects.\u2026Groups allow you to join elements together,\u2026turn them all pink at the same time,\u2026or move them 50 pixels to the right at the same time.\u2026They also allow you to tidy up and organize elements\u2026in the DOM which can get into quite a mess.\u2026"
                }
            ]
        },
        {
            "title": "5. Scales and Axes",
            "sections": [
                {
                    "title": "Introducing scales",
                    "transcript": "- [Narrator] Now that we've got groups under our belt,\r\n                    we will soon be able to use\r\n                    D3's built-in axis generators.\r\n                    You can build axes manually, if you'd like,\r\n                    but the automatic ones save a lot of time.\r\n                    D3 will draw the axis line, the tick marks,\r\n                    and the labels dynamically from the data,\r\n                    spacing everything neatly for us.\r\n                    D3 arranges all these elements in groups.\r\n                    If the data change, your axis updates.\r\n                    Even if you go from annual data to daily data,\r\n                    D3 will cope.\r\n                    In fact, D3 axes can show dates, text, or numeric data.\r\n\t\t\n\t\t\n                    You can format the various parts of D3 axes\r\n                    any way you'd like, too, so really,\r\n                    there's no reason not to.\r\n                    Before we can make an axis,\r\n                    we need to understand about scales.\r\n                    So far we've supplied the raw data to D3,\r\n                    such as our array of five, 11, and 18,\r\n                    and then multiplied it by 15 or something,\r\n                    to make it the right sort of size on the web page.\r\n                    But we don't want to have to work out a multiplier\r\n                    every time we draw a chart.\r\n                    Scales will do this for us.\r\n                    Scales have domains, or inputs,\r\n                    and ranges, or outputs.\r\n\t\t\n\t\t\n                    Let's say our data set contains financial debt data,\r\n                    and we need to use a linear numeric scale.\r\n                    The smallest debt is zero on the left,\r\n                    and the largest is 10,000,\r\n                    and since this is real-world data,\r\n                    there are units.\r\n                    In this example, the units are dollars.\r\n                    The domain can accept negative values,\r\n                    even though it isn't here.\r\n                    So this is the domain of our scale, our input.\r\n                    Think of it line a number line, if you can remember those.\r\n                    Possible values run from left to right,\r\n                    from naught to 10,000.\r\n\t\t\n\t\t\n                    Most charts need two domains:\r\n                    one for the x-axis, and one for the y-axis.\r\n                    This looks like it's going to be y-axis data,\r\n                    to me, anyway,\r\n                    because the x-axis is usually dates.\r\n                    Next we have the range.\r\n                    Range is D3 speak for output.\r\n                    The range describes the height or width\r\n                    available for our chart on the web page,\r\n                    so the range is always in pixels.\r\n                    Range cannot be negative,\r\n                    because a negative height would be meaningless.\r\n                    As with domain, most charts would have two ranges:\r\n                    one for the x-axis, and one for the y.\r\n\t\t\n\t\t\n                    Let's say our domain here is for the y-axis.\r\n                    Then this range tells us that the y-axis\r\n                    is 300 pixels high.\r\n                    As with the domain, the range can be thought of\r\n                    as a number line, running left to right.\r\n                    All the scale does is works out\r\n                    the appropriate multiplier for our data.\r\n                    It's going to tell us that a debt of 3,500 dollars\r\n                    should be plotted at a y value of 105 pixels,\r\n                    for a linear scale.\r\n                    To work out the multiplier,\r\n                    the scale needs four bits of information:\r\n                    the minimum and maximum values from our data,\r\n                    and the starting and ending pixel position\r\n                    where we want the chart.\r\n\t\t\n\t\t\n                    One final thing:\r\n                    do you remember when we made our first bar chart?\r\n                    The bars were upside down to begin with.\r\n                    That's because web pages draw their elements top down,\r\n                    but we read charts bottom up,\r\n                    so we had to invert our y-position.\r\n                    For this reason,\r\n                    we normally match the minimum value of the domain\r\n                    against the maximum value of the range,\r\n                    and vice versa.\r\n                    It saves having to subtract y values from a height later."
                },
                {
                    "title": "Creating a linear scale",
                    "transcript": "- [Instructor] We're going to create\u2026some axes on our area chart.\u2026This is going to take the following two sections.\u2026So this section is how to make the scale\u2026for the axis that we will add in the next section.\u2026So, we can close the Interpolate file\u2026and redirect our HTML file to area.js\u2026which we can now re-open.\u2026And we're all set to start.\u2026D3 scales can be continuous,\u2026ordinal, quantized or sequential.\u2026We want the most common type of continuous scale\u2026which is a numeric linear scale.\u2026\t\t\n\t\t\nSo let's just check that we've got an area chart showing.\u2026And there, we have.\u2026Let's do the y-axis first.\u2026After the data and after the height and width,\u2026but before the area generator,\u2026we're going to enter\u2026var y = d3.scaleLinear().domain().range():.\u2026And that is the structure that scales always take.\u2026You declare the type of scale you want\u2026and then take a domain as an input\u2026and a range as an output.\u2026\t\t\n\t\t\nAnd you can write it all in one line like this,\u2026but I think it's gonna be easier\u2026when we start filling those out\u2026if we pop them on separate lines, like that.\u2026"
                },
                {
                    "title": "Creating a linear axis",
                    "transcript": "- [Instructor] So now we can define\u2026our first axis generator.\u2026The axis generator uses a scale\u2026to add and position elements on the page.\u2026And this terminology has been hugely simplified\u2026in version four.\u2026So all we do now is var yAvis equals\u2026d3.axisleft(y)\u2026And that y that we're using there\u2026refers to this variable here.\u2026So if we had called that cabbages\u2026we would be writing cabbages in there.\u2026And that's it, we've declared a generator.\u2026Now the generator isn't going to run\u2026unless we call it, which we'll in a moment.\u2026\t\t\n\t\t\nThere are four types of axis in d3,\u2026axis left, axis right,\u2026axis top, axis bottom.\u2026And the left and the right part,\u2026just tells d3 where to put the labels relative to the line.\u2026Should the labels pop up on the left hand side of line\u2026or the right hand side of the line.\u2026And the same goes for top and bottom.\u2026So it's not about positioning the axis on the web page,\u2026as we'll see.\u2026To add the axis, what we need to do\u2026is add a group element\u2026then call the axis on that group.\u2026D3 then adds all the elements into the group for us.\u2026"
                },
                {
                    "title": "Positioning and formatting our axis",
                    "transcript": "- [Narrator] In the last section,\u2026we added an axis and positioned both the chart and axis\u2026together within a group.\u2026In this section, we're going to see all the elements\u2026that make up the axis.\u2026And through doing that,\u2026we're going to learn how to style the axis,\u2026if we wanted to.\u2026So let's take a look at the DOM.\u2026And if we just refresh the page,\u2026that will take us to root level,\u2026and then svg, and that's our chart group.\u2026Here we have the path, which is the area chart.\u2026And here we have the group, which is the axis.\u2026So our line of code said append group\u2026and then run this axis generator for us.\u2026\t\t\n\t\t\nAnd everything else that you see here\u2026has been done very kindly by D3.\u2026One thing to note at this high-level group\u2026which contains all of the elements of the axis,\u2026is this thing here,\u2026we've got text anchor equals end.\u2026And what that does, as we've seen in previous sections,\u2026is if we take the number 20 here,\u2026that tells the browser\u2026that it's this right-hand side of that label\u2026that should all be neatly lined up.\u2026If we had chosen axis right instead of axis left,\u2026"
                },
                {
                    "title": "Creating a time scale",
                    "transcript": "- [Instructor] Now we're going to add an X scale\u2026for our time data,\u2026which is in data years.\u2026Before we get started on that,\u2026we're going to make one small change\u2026to our Y scale,\u2026which we have here.\u2026You see that we have written in 119 manually here.\u2026And what we're going to do is we're going to\u2026drive this dynamically from our data\u2026by using a function called max.\u2026So we're going to replace it with d3.max,\u2026and the maximum we want is dataArray.\u2026And if we save that, and check it,\u2026you see it works perfectly well.\u2026\t\t\n\t\t\nIf we were to log that to the console,\u2026it would output 118.\u2026That's going to be useful,\u2026because we're going to use that again shortly\u2026for the X scale.\u2026So one thing to point out before we start\u2026is that we're going to use the array dataYears\u2026to drive our X scale.\u2026But these are all strings.\u2026They're not formatted as dates in any way.\u2026They're surrounded by quotation marks\u2026and therefore they're text.\u2026We're gonna deal with that shortly.\u2026For now, let's declare x, var x = d3.\u2026And this time we're using scaleTime.\u2026\t\t\n\t\t\nJust like before, we need domain and range,\u2026"
                },
                {
                    "title": "Creating a time series axis",
                    "transcript": "- [Instructor] Now we're going to add an X axis based\u2026on our X scale.\u2026So we can delete that console log thing\u2026that we had there.\u2026And we'll keep our structure\u2026by popping it under here.\u2026And it's as straight forward as it was before.\u2026For X axis, D3 dot axis, bottom.\u2026The scale is X.\u2026And that's all we need.\u2026Now that won't run until we call it\u2026so we're going to call it down here.\u2026Chart group append g.\u2026We'll give that a class attribute.\u2026\t\t\n\t\t\nThere ya go.\u2026Class, axis X.\u2026And then we call our axis generator\u2026which is X axis.\u2026And then we check and refresh\u2026and low and behold we have an X axis.\u2026Now it's not where we wanted it\u2026but it is there and beautifully formatted\u2026as I'm sure you'll agree in purple and blue.\u2026So the X axis has been positioned at zero zero.\u2026So why isn't it showing up here\u2026which is the zero zero location of the page?\u2026And that's because we've added the X axis\u2026into chart group and chart group has been transformed.\u2026\t\t\n\t\t\n50 pixels rightwards and 40 pixels downward.\u2026So although the X axis defaults\u2026to a position of zero zero,\u2026it has in fact been shifted\u2026"
                },
                {
                    "title": "Creating an ordinal scale and axis",
                    "transcript": "- [Instructor] So far, we've seen two types of scale,\u2026linear and time.\u2026Both of these are types of Continuous Scale.\u2026In fact, there are three other categories of scale in D3,\u2026ordinal, quantize, and sequential.\u2026In this section, we're going to look at ordinal scales.\u2026Ordinal scales contain category labels.\u2026Imagine an axis that has the days of the week\u2026from Monday to Friday.\u2026Ordinal axes display strings that are passed to them\u2026rather than calculating a value,\u2026like numerical or time axes do.\u2026\t\t\n\t\t\nSo you can close down area.js\u2026and open up shapes.js that we used previously\u2026and re-reference your HTML file to shapes.js\u2026and just check that that's all worked correctly,\u2026which it has.\u2026What we're going to do is add an X-axis\u2026to the bar chart here using ordinal labels.\u2026So the first thing that we need to do\u2026is create your array of labels,\u2026which I'm going to call dataDays,\u2026and its three string values,\u2026and I'm going to call it Mon, Wed, and Fri.\u2026\t\t\n\t\t\nNext, we define our X scale which is, this time,\u2026d3.scaleOrdinal and, just like before,\u2026it takes domain and range but as we're going to see,\u2026"
                },
                {
                    "title": "Using colour scales",
                    "transcript": "- [Instructor] In D3, we often use color to express data.\u2026For example, a darker color might mean a higher value\u2026or red might mean one thing and green another.\u2026In cases where color is a range,\u2026it's appropriate to use a scale,\u2026since a scale just translates values from one range\u2026into values in another.\u2026We're just going to look quickly at some of the color ranges\u2026that D3 provides for us automatically.\u2026There are eight here: interpolate warm, interpolate cool,\u2026interpolate rainbow, that's the one\u2026we're going to be using shortly.\u2026\t\t\n\t\t\nYou can see there's a few of them.\u2026Now actually, you can generate\u2026your own custom ranges as you see fit,\u2026but for now we're going to use interpolate rainbow\u2026because it's got the greatest number of quite bright colors.\u2026So what we're going to do, back in our shapes file,\u2026is color our rectangles using one of those color ranges.\u2026The first thing to do is to declare a new color scale.\u2026And we're going to say\u2026var rainbow equals d3.scaleSequential().domain().\u2026\t\t\n\t\t\nColor scales, sequential scales, work a bit differently\u2026"
                },
                {
                    "title": "Introducing other scales",
                    "transcript": "- [Instructor] I want to show you a few scales\u2026and axes that are available to you,\u2026even though we won't dwell on them in the course.\u2026We've looked at linear, time series, and ordinal scales,\u2026and these are by far the most commonly used.\u2026But D3 has several other scales\u2026that can save you a great deal of effort.\u2026It's easiest to demonstrate this with a block.\u2026This block uses version three, not version four,\u2026but it shows us the same principle by showing axes\u2026that are based on different scales.\u2026So this is a linear scale, where all the parts\u2026are evenly spaced, and this is a logarithmic scale,\u2026which defaults to base ten but can be changed.\u2026\t\t\n\t\t\nThis is a natural logarithm.\u2026And then we have power scales,\u2026first square root and then squared.\u2026D3 supports all of these scales,\u2026saving you having to write your own functions.\u2026As well as plain linear scales,\u2026we have quantile, quantize and threshold scales.\u2026Quantile is probably the most familiar.\u2026If you have a distribution of data,\u2026you might divide your distribution\u2026into a hundred groups, creating percentiles.\u2026"
                }
            ]
        },
        {
            "title": "6. Importing Data into D3",
            "sections": [
                {
                    "title": "Introducing external data",
                    "transcript": "- [Instructor] Until now, we've created our own arrays\r\n                    for data, like here, var dataArray.\r\n                    But in reality, we wouldn't want to type out\r\n                    a whole dataset into JavaScript.\r\n                    What we would normally do is pull data\r\n                    in from a database or file.\r\n                    D3 is ready to help us with this,\r\n                    as it contains a number of data handlers\r\n                    that can make sense of different file formats.\r\n                    D3 has built-in handlers for XML, CSV, TSV,\r\n                    HTML, text files, and JSON.\r\n                    There's also a DSV data handler that can pass data\r\n                    with a delimiter you specify, such as a pipe,\r\n                    and you can write your own data handler too.\r\n\t\t\n\t\t\n                    Some of the data handlers are very similar,\r\n                    so we're going to group them together.\r\n                    CSV, TSV, and DSV are virtually identical,\r\n                    so we'll take a look at those together.\r\n                    Then we'll have a look at JSON and XML files.\r\n                    And finally, I'll introduce you to the methods\r\n                    you would need to get data from a URL or a database."
                },
                {
                    "title": "Parsing a CSV file",
                    "transcript": "- [Instructor] Even if you've never created a database,\u2026you've probably come across a CSV file,\u2026because Excel worksheets can be saved in this format.\u2026CSV stands for comma-separated value.\u2026If you have access to the exercise files,\u2026look to find prices dot CSV,\u2026and open it up.\u2026If not, you can create your own file in Excel.\u2026Just fill the first column with dates,\u2026and the second column with numbers.\u2026Be sure to place the word month in cell A1,\u2026and the word price in B1.\u2026In my file, the first data point on each row,\u2026is a date in American date format.\u2026\t\t\n\t\t\nThe second data point is a price value,\u2026in dollars, with a dollar sign.\u2026Then go File,\u2026Save As CSV.\u2026And save it in the same directory you are using for\u2026all your other files.\u2026Call it prices dot CSV.\u2026Create a new JavaScript file now.\u2026And save it as prices dot JS.\u2026We can close down shapes dot JS now.\u2026And you need to re-link your D3 dot HTML page,\u2026like so.\u2026So now if you go and preview\u2026in Firefox you should have a blank page.\u2026\t\t\n\t\t\nNow we're going to write a data handler.\u2026D3 dot CSV\u2026prices dot CSV\u2026"
                },
                {
                    "title": "Drawing a line chart from CSV data",
                    "transcript": "- [Instructor] Now, that our data are shipshape,\u2026let's set about using them to draw a line chart.\u2026Now, one thing we need to do quickly,\u2026so that we can see the resulting chart,\u2026is just add some style declarations here for path.\u2026So, we've got stroke of green\u2026and we'll give it a stroke-width there of two.\u2026We can arrange our get data on multiple lines here,\u2026as long as it's within these curly brackets.\u2026In this section, we're going to put together\u2026all the things that we saw in the last chapter.\u2026\t\t\n\t\t\nSo, we're going to start by defining height of 300\u2026and a width of 500.\u2026The next thing we need is some max and min\u2026of the data that we have.\u2026And we need this for the scales.\u2026And the scales are going to be used to draw the chart\u2026and to draw the axes.\u2026So, we'll declare var max,\u2026which we're going to use to return the maximum price data.\u2026So, it's d3.max().\u2026The data is held in an array called data.\u2026And then again, we're using this optional function parameter\u2026to tell d3 precisely which data point we want\u2026which is d.price.\u2026\t\t\n\t\t\nAnd if we log back to the console,\u2026"
                },
                {
                    "title": "Using TSV and DSV",
                    "transcript": "- [Instructor] So we've had a look at csv files\u2026and now I just want to show you tsv and dsv data handlers.\u2026They work in a really similar way to csv.\u2026Create or open a small tab separated value file.\u2026I've got this one here\u2026and the quickest way to do this\u2026if you don't have access to the files\u2026is to copy the first few lines of the csv file,\u2026replace the commas with a tab\u2026and then just save as data.tsv.\u2026Also create a new file\u2026and save as data handlers.js\u2026and then rereference your D3 file to data handlers.\u2026\t\t\n\t\t\nWhat we're going to do with this file\u2026is have a look at all the different handlers\u2026that D3 offers.\u2026So the first one we've already done\u2026and we can just copy it across\u2026and that is csv.\u2026So I've copied that\u2026and pasted it\u2026and then don't forget at the end you need a curly grace\u2026and a closing parenthesis like so\u2026and to check that that's working,\u2026let's just log the array to the console\u2026and there we have it as an array with lots of prices\u2026and dates in it\u2026which is just what we had before.\u2026So we're going to keep that there\u2026but I want you to copy it\u2026"
                },
                {
                    "title": "Parsing JSON",
                    "transcript": "- [Instructor] Now we're going to look at\u2026how to gt JSON data into our D3.\u2026JSON stands for Javascript Object Notation.\u2026It's a way to store and exchange data.\u2026It's a bit like XML, but people find it lighter,\u2026faster, and easier to use.\u2026JSON is not peculiar to D3,\u2026but because it's Javascript-based,\u2026they work very well together.\u2026And this is what JSON looks like.\u2026If you don't have access to these files,\u2026you can copy what's on your screen now.\u2026Bear in mind that all of the JSON data\u2026comes within a square bracket to the top and the bottom,\u2026meaning that it's an array.\u2026\t\t\n\t\t\nAnd then within that array,\u2026we have curly brackets or objects.\u2026So here we have a top level entity\u2026which doesn't have any parents.\u2026Below that we have two children, A,\u2026which is at level two, and B, which is at level two.\u2026And then each of those children\u2026have some children, one or two.\u2026The children are also contained within an array,\u2026and each child takes exactly the same format\u2026as the parents.\u2026So now go to DataHandlers, and we're going to\u2026make our new handler here, which is d3.json,\u2026"
                },
                {
                    "title": "Parsing and mapping XML",
                    "transcript": "- [Instructor] Now we're going to take a look\u2026at the data handler for xml.\u2026And here's an xml file that I prepared earlier.\u2026You can see we have each of the letters\u2026of the alphabet A to zed\u2026and a numeric value called frequency against each one.\u2026You can copy what's on the screen\u2026if you don't have access to the files.\u2026And bear in mind, you don't need all 26 letters.\u2026You can just copy, say five, if you like.\u2026As long as you keep the structure exactly the same.\u2026So you need to keep the xml declaration,\u2026the enclosing data tags, the letter tags,\u2026which contain an ID and the frequency tags\u2026which contain a number.\u2026\t\t\n\t\t\nThe data handler for xml works in much the same way\u2026as the one for JSON.\u2026You use d3.xml to load the file.\u2026And my ones called data.xml\u2026and then you have .get\u2026within which we put function (error, data)\u2026and we can shift that down a bit.\u2026And I'm just gonna comment out these logs over here like so.\u2026So the first thing we're going to do\u2026is log our new data variable to the console.\u2026\t\t\n\t\t\nAnd you see it gives us something called a document.\u2026"
                },
                {
                    "title": "Parsing a TXT file",
                    "transcript": "- [Instructor] In this section, we're going to look at\u2026importing data from a text file.\u2026If you can avoid using a text file, do.\u2026It's often more robust to use another format,\u2026and it is certainly simpler.\u2026Previously, we imported a text file,\u2026but actually it was a pipe-delimited file in disguise.\u2026And this time, we're going to import a proper text file.\u2026So, I'm going to be using this file,\u2026which is called test.txt,\u2026and if you don't have access to it,\u2026you can just copy what's on the screen now.\u2026D3 imports text files as strings.\u2026\t\t\n\t\t\nThe strings contain the tabs and new-line commands\u2026that create the structure we see in the text.\u2026But D3 doesn't automatically break it down into rows.\u2026It pulls it in as one long string.\u2026In this section, I'm going to assume that\u2026you do in fact want rows.\u2026I'm going to show you one way of parsing a text file.\u2026To load it, we use d3.text, just as we did before.\u2026And then, in there, we pop the URL,\u2026which is test.txt,\u2026and we know that we can use get\u2026but we can't use row, because d3.text\u2026doesn't interpret text file as having rows.\u2026"
                },
                {
                    "title": "Parsing HTML",
                    "transcript": "- [Instructor] D3 allows you to download webpages\u2026or parts of webpages.\u2026Perhaps a particular html element on a webpage\u2026always contains public economic data\u2026and you want to drive a graphic on your site\u2026from this data.\u2026You wouldn't want to download the data\u2026or put it in a database to show it.\u2026Not if that meant you had to update your database every day.\u2026It's far cleaner to scrape the data off a webpage\u2026if you have permission.\u2026Just going to comment out these logs to the console\u2026and then we're going to write a D3.html handler.\u2026\t\t\n\t\t\nUsing the D3.hmtl function is much like using\u2026the other functions to begin with.\u2026We pop the url in here\u2026and this time it's real url\u2026and I'm going to pop in\u2026this website here.\u2026Then we have .get as normal\u2026and inside .get we put the normal function\u2026and if we log that to the console,\u2026let's see what we have.\u2026We've still got a persistent xml line here\u2026so I'm just going to whip that out.\u2026There it is.\u2026Sneakily save that\u2026and refresh.\u2026\t\t\n\t\t\nSo this is what we've been returned.\u2026It's called a document fragment\u2026and if we click on it,\u2026"
                },
                {
                    "title": "Introducing other data methods",
                    "transcript": "- [Instructor] So far, we've looked\u2026at five groups of data loaders.\u2026CSV, JSON, XML, TXT, and HTML.\u2026They each supply the data\u2026to the webpage in quite different ways.\u2026But we get hold of them in quite similar ways.\u2026In fact, all of these so-called convenience methods\u2026are part of something called d3 request\u2026which has the following structure,\u2026in d3 speak we have d3.request(url)\u2026which means load the file at location url.\u2026Then for some of the handlers we have .row\u2026which lets us format the data as we load it.\u2026\t\t\n\t\t\nFor all of the handlers we have .get\u2026which is where we do something with the data\u2026such as display it as a chart.\u2026In d3 terms, the do something part\u2026is called the callback function.\u2026We can play with this structure quite a bit.\u2026For instance, we could write\u2026exactly the same function like this.\u2026Formatting by row is still possible\u2026for tabular formats like CSV.\u2026D3 works out which function is for which purpose\u2026by its location within the brackets.\u2026Now you could write the functions out long form.\u2026\t\t\n\t\t\nYou can reorganize the lines like this\u2026"
                }
            ]
        },
        {
            "title": "7. Additional Graphics with D3 Layout",
            "sections": [
                {
                    "title": "Introducing layout",
                    "transcript": "- [Instructor] D3 layouts are a bit like D3 generators.\u2026Human puts in data, and they output x,y coordinates.\u2026Some layouts do a great deal more than this.\u2026Layouts make it easier to make complex graphics.\u2026They do the heavy lifting for you\u2026by using predefined rules about how the graphics\u2026should look and be spaced.\u2026We're going to start off looking at some\u2026diagrammatic layouts, in particular,\u2026a category called hierarchical layouts.\u2026"
                },
                {
                    "title": "Making a tree from JSON",
                    "transcript": "- [Narrator] Now we're going to make a tree diagram\u2026using our JSON data.\u2026So let's start with the usual.\u2026Gonna make a new file and save it as tree.js.\u2026And then we're gonna re-reference our d3.html page.\u2026And we can close down\u2026the data handler's page if you've still got that open.\u2026So we can start with the usual, height 200.\u2026Width we're gonna make 500.\u2026And margin is an object, like so.\u2026Now we're going to declare the layout function\u2026with a variable called tree.\u2026\t\t\n\t\t\nYou can call it whatever you like,\u2026and that is d3.tree.\u2026And then it takes one parameter, which you size.\u2026Size takes an array, and previously\u2026when we've seen this sort of behavior\u2026the array has consisted mostly of min and then max.\u2026But in this case, it's width and then height.\u2026Now this bit of code on its own\u2026isn't going to draw us a tree.\u2026It's only gonna do something when we call it later.\u2026So let's add our svg and we'll give it\u2026attributes of full width and full height.\u2026\t\t\n\t\t\nThere we go.\u2026And again, as normal, we're gonna add chartGroup to our svg\u2026and we're gonna give it an attribute\u2026"
                },
                {
                    "title": "Making a Voronoi tessellation",
                    "transcript": "- [Instructor] D3 isn't just for charts.\u2026It's great at physical simulations and spatial mapping, too.\u2026So I'm going to show you how to make a diagram\u2026you might never have heard of.\u2026Imagine you have a map in front of you,\u2026and it shows all the gas stations on it as little dots.\u2026You're frequently running low on fuel\u2026because you drive all over the region.\u2026And you want a graphic that will always be able to tell you\u2026which is the closest gas station.\u2026One way of doing this would be\u2026to superimpose a Voronoi diagram over your map.\u2026And that's what this is here.\u2026\t\t\n\t\t\nA Voronoi takes an input,\u2026the locations of the fuel stations,\u2026and outputs a series of tessellating polygon shapes,\u2026one per fuel station.\u2026On any of these black lines\u2026you are equally far from two dots.\u2026Within a polygon, your best bet for fuel\u2026is to head for the dot inside the polygon.\u2026For this graphic we're going to take a different approach.\u2026We're going to put all the CSS and JavaScript\u2026into the HTML document.\u2026So create a new file\u2026and save it as voronoi.html.\u2026\t\t\n\t\t\nYou can copy and paste the setup from d3.html if you like.\u2026"
                },
                {
                    "title": "Introducing other layouts",
                    "transcript": "- [Instructor] Let's leave the coding for a bit,\u2026and show you some layouts via example.\u2026In this chapter, we looked first\u2026at a hierarchical layout called Tree.\u2026Here's another Tree and this one's by Mike Bostock.\u2026And we can see that there's a related layout\u2026called Dendrogram.\u2026Dendrogram and tree are really similar,\u2026but they have different assumptions about positions.\u2026Both of these layouts can be made radial instead,\u2026if you prefer.\u2026So this is a radial Tree,\u2026and here's a radial Dendrogram,\u2026which I find a bit more neat and tidy.\u2026\t\t\n\t\t\nNext we have the Treemap,\u2026easily confused with Tree\u2026until you see how it's laid out.\u2026A Treemap is a rectangle split into smaller rectangles,\u2026where the size of the rectangle\u2026represents a value.\u2026This one shows the total amount spent\u2026by the UK Home Office to different airlines in 2011,\u2026split by destination and by type.\u2026And we have a slightly more colorful example here.\u2026You can easily show two values on Treemaps,\u2026using the rectangle size for one value,\u2026and depth of color for another.\u2026The Pack layout is similar in principle,\u2026"
                }
            ]
        },
        {
            "title": "8. Preparing Your Data for Advanced Graphics",
            "sections": [
                {
                    "title": "Data manipulation",
                    "transcript": "- [Instructor] So far, we've imported and made sense\u2026of fairly simple data files.\u2026Apart from a bit of reformatting,\u2026our data files have contained the data we need.\u2026But what if we need to filter our data?\u2026Or what if we need to group or nest our data\u2026before we visualize it?\u2026In this chapter, we will gain a toolkit\u2026to manipulate data in more advanced ways\u2026for more advanced graphics.\u2026"
                },
                {
                    "title": "Prepare stack data using map",
                    "transcript": "- [Presenter] In this section\u2026we're going to prepare our data\u2026ready for making a stacked area chart.\u2026Stacked area charts are more complex to code\u2026than basic area charts because each layer has to sit\u2026precisely on top of the layer below.\u2026With our previous area chart\u2026we set the y nought value to height\u2026because we wanted to the bottom of the chart\u2026to run along the x axis\u2026but now any layer other than the bottom layer\u2026will need dynamic y nought values.\u2026D3 helps us to calculate these values\u2026with a generator called stack.\u2026\t\t\n\t\t\nWe're going to go back to using d3.html now.\u2026So we can close voronoi.html\u2026and then we can create a new file\u2026which we're going to save as stack\u2026and then if we open d3.html\u2026we need to re-reference that like so.\u2026If you have access to the Exercise Files\u2026you can open up data2.xml and if you don't have access\u2026please copy what's on the screen in front of you.\u2026You don't need all of the data points that we have here.\u2026\t\t\n\t\t\nThe first five or so will do\u2026but you do need to keep the structure.\u2026And the structure that we have,\u2026"
                },
                {
                    "title": "Drawing a stack area chart",
                    "transcript": "- [Instructor] In the last section we manipulated our data\u2026with d3.map and d3.stack.\u2026Now we're going to make a stack area chart out of our data.\u2026First, let's add some axes.\u2026Until now we've declared a variable x axis\u2026and called it while appending a group.\u2026D3 then kindly adds all the elements we need\u2026into that group.\u2026Well, in d3 version four we don't need to declare the axis\u2026generator separately.\u2026We can integrate the two lines of code,\u2026so let's do that now.\u2026chartGroup.append group,\u2026and we can give it a class of x axis,\u2026and we're going to want to transform it\u2026and shift it down by height.\u2026\t\t\n\t\t\nSo transform, translate, naught height.\u2026And let's pop that on a new line,\u2026make it a bit easier to read.\u2026And then we call d3.axisBottom.\u2026And we're using the x scale.\u2026And if we check our browser, there we have an x scale.\u2026Now we're gonna do the same to add the y axis.\u2026chartGroup.append g.\u2026And we'll give it a class of y axis.\u2026\t\t\n\t\t\nAnd we don't need to transform, translate this one,\u2026so we can just call it d3 axisLeft.\u2026And this one uses the y scale.\u2026"
                },
                {
                    "title": "Advancing selections",
                    "transcript": "- [Instructor] In the last section, we saw that a data point\u2026bound to a parent element could still be accessed\u2026by a child element.\u2026This is really important in D3, and in this section\u2026we're going to expand on it.\u2026You already know that D3 allows us to bind data\u2026with elements, and that this link stays in place\u2026unless you remove it or overwrite it.\u2026But what I haven't mentioned yet is that D3\u2026automatically matches lower level data\u2026to lower level elements.\u2026In this section, I'm going to demonstrate this\u2026using code I have prepared earlier,\u2026and that's this select.js.\u2026\t\t\n\t\t\nYou can follow along creating the same files if you like\u2026or you can put your pen and keyboard away\u2026because the purpose of this section is to get\u2026a concept across to you rather than to teach you a new tool.\u2026So in order for you to see the finished article,\u2026I need to just add some style decorations into the CSS.\u2026So I'm gonna say that my rectangle should lightblue,\u2026and I should have a nice border of cornflowerblue,\u2026and I've got some circles in there,\u2026and I'm gonna fill them with indianred,\u2026"
                },
                {
                    "title": "Make flat data multidimensional",
                    "transcript": "- [Instructor] D3 has a number of functions\u2026for manipulating data.\u2026We've already seen map which runs a transformation\u2026on each row of a data set.\u2026Now we're going to look at nest.\u2026Nest turns flat tabular data into hierarchical data.\u2026Change the reference in d3.html to dataHandlers\u2026and reopen that file\u2026and find the section that's got the C-S-V data handler\u2026which for me is at the top.\u2026If we just log this data to the console,\u2026let's see what we actually start with\u2026by way of data.\u2026\t\t\n\t\t\nAnd we see that we have an array of objects.\u2026We've got one object for each row.\u2026Each object contains a month which is a date and price.\u2026So go back to atom and declare\u2026a new variable called nested data.\u2026And we set it to d3.nest\u2026and we give it two parameters: .key and .entries\u2026which you can style any way you like.\u2026I'm going to style mine like that.\u2026Entries is the array containing the data we want to nest\u2026and in our case that's called data\u2026because that's the name we've given it here\u2026in these brackets, so we just type in data there.\u2026\t\t\n\t\t\nKey tells D3 how we want to group the data.\u2026"
                },
                {
                    "title": "Filtering data",
                    "transcript": "- [Narrator] There are times when you don't want to show\u2026an element for every data point you have.\u2026In this version three block,\u2026a data set's been used to generate a line\u2026and the same data set has been used\u2026to add some circles to the line.\u2026But only the most recent data points\u2026have been added as dots.\u2026In cases like this, d3.filter can be just what you need.\u2026So we're going to go back to our select.js example,\u2026closing data handlers, and opening Select there.\u2026\t\t\n\t\t\nWe can refresh the page like so\u2026and we can comment out those logs to the console there.\u2026So we've got line 58.\u2026We'll delete that one and we can delete this one as well.\u2026Now the circles here are showing\u2026the numbers 1 to 18 from the array.\u2026We're going to use d3.filter to show circles\u2026only where the data point is above 10.\u2026So what we do is we find relevant block of code,\u2026which in this case is circles,\u2026and after the append statement we type .filter.\u2026\t\t\n\t\t\nWithin the filter we have a function.\u2026So what the filter does is it goes through\u2026and checks each row against the condition.\u2026"
                }
            ]
        },
        {
            "title": "9. Interactivity",
            "sections": [
                {
                    "title": "Introducing interaction",
                    "transcript": "- [Instructor] Sometimes a story can only be told\u2026with moving parts.\u2026Have you seen Hans Rosling's famous TED Talk,\u2026The Best Stats You've Ever Seen?\u2026This is block created by Mike Bostock\u2026to mimic what was in that presentation.\u2026Imagine his scatter plot without animation.\u2026Even with multiple static images, one after the other,\u2026it wouldn't work nearly so well.\u2026Our brains like smooth movement.\u2026I think it can help us to understand\u2026what's going on in a complex graphic.\u2026There's a number of types\u2026of interactivity covered in this chapter.\u2026\t\t\n\t\t\nNot all of them involve animation.\u2026Some are simple responses to user action.\u2026They hover, and something changes color.\u2026They click, and something happens.\u2026Some of the ways of adding interactivity\u2026aren't specific to D3, including the first one,\u2026making our graphics responsive.\u2026"
                },
                {
                    "title": "Making your graphic responsive",
                    "transcript": "- [Narrator] A web page that's responsive changes its size\u2026or layout depending on the size of the user's browser.\u2026You've probably visited a web page before on a computer,\u2026only to notice later that the layout is completely\u2026different when you visit the same web page on your phone.\u2026The content is often identical.\u2026The actual HTML that's written doesn't need to change.\u2026What changes is the styling.\u2026So typically, making a web page responsive\u2026is the remit of CSS, and CSS3 in particular.\u2026But since this is a course on D3,\u2026I'm going to show you the JavaScript method.\u2026\t\t\n\t\t\nWe're looking at out Voronoi diagram, and if we look\u2026at the code, we can see we've got a width there of 960.\u2026And if we look at the graphic, you can see that 960\u2026is significantly less wide than my screen.\u2026To make this graphic responsive, we can use JavaScript\u2026to find the height and width the window,\u2026and use that to set the width and the height.\u2026So we're going to start off by just logging to the console.\u2026window.innerWidth\u2026And there you can see that the screen is 1359 wide,\u2026"
                },
                {
                    "title": "Adding interactivity with CSS",
                    "transcript": "- [Instructor] Now we're going to add\u2026some slightly more advanced interactivity.\u2026We're going to stick with our voronoi diagram,\u2026but make the polygon highlight in yellow when we hover.\u2026CSS is great for this.\u2026It helps keeps files small by adding the behaviors\u2026at higher level than the element level.\u2026We've already got some style here for the polygons,\u2026g.polygons path,\u2026and this style's all path elements\u2026within the group classed polygons.\u2026CSS has something called pseudo-classes,\u2026some of them have been around since CSS 2\u2026and others were brought in in CSS 3.\u2026\t\t\n\t\t\nOnce again Internet Explorer\u2026has rather shaky support for them.\u2026Pseudo-classes are brilliant.\u2026They let us style just the first element or just the last,\u2026or we can style empty elements\u2026which contain no text or child.\u2026But the one that we want for now,\u2026and one of the most useful, is hover.\u2026We use hover to style elements\u2026when they're being hovered over,\u2026so we can type g.polygons path:hover,\u2026and then we go fill: yellow.\u2026And if we save that and refresh,\u2026we see that that's worked nicely from just one line of code.\u2026"
                },
                {
                    "title": "Adding interactivity with JavaScript",
                    "transcript": "- [Instructor] With JavaScript you can get really creative.\u2026We're going to start\u2026by recreating the hover function using JavaScript.\u2026So you can delete the hover statement from your CSS.\u2026Then scroll down.\u2026Now find the bit of code that adds the polygons.\u2026What you want to do is\u2026add a .on statement at the end there.\u2026The first parameter is the event that you're listening for.\u2026We're going to say mousemove.\u2026And then in the second one\u2026we enter a function to dell D3 what to do.\u2026\t\t\n\t\t\nNow what you could do here is call a function,\u2026but because the line of code\u2026we're going to write is really small\u2026we're just going to write it straight in here.\u2026this.style.fill\u2026is red.\u2026And if we refresh that\u2026we certainly do have a red fill going on there.\u2026But as you can see, it's not disappearing when we mouse out\u2026and for that we would need to add\u2026another action there which is mouseout.\u2026And this time we put the fill back to white\u2026which is what it was originally.\u2026Now notice a couple of things here about this setup.\u2026\t\t\n\t\t\nWe haven't got D or I in these brackets here\u2026"
                },
                {
                    "title": "Introducing dispatch",
                    "transcript": "- [Teacher] Sometimes, you want to fire off an event\u2026without the used having done anything;\u2026or perhaps you want to trigger one event based on another.\u2026For this you can use d3.dispatch.\u2026We're going to create an example in our Voronoi diagram.\u2026So we already have a set of behaviors in our Voronoi\u2026example, we've already added a mouseover, which displays\u2026a tool-tip showing the number of sides of the polygon\u2026you're hovering over, and before we begin hovering\u2026or mouse moving, technically, the tooltip is hidden.\u2026So we've already got an event, and we've already got\u2026some behaviors that we want on that event.\u2026\t\t\n\t\t\nAnd what we're going to do now is trigger the event\u2026even though nobody is hovering.\u2026And to be more specific, we're going to trigger the event\u2026on one specific polygon, and I'm going to\u2026turn that polygon blue so you can see\u2026what we're aiming for.\u2026To do that, we select the group\u2026that contains the polygons, and then\u2026we use CSS terminology, nth-child,\u2026to select the 31st polygon, and I know\u2026it's the 31st because Javascript is 0-indexed,\u2026"
                },
                {
                    "title": "Transitions",
                    "transcript": "- [Narrator] In the last few sections,\u2026we've seen tool tips, pop up, and colors\u2026change on hover.\u2026In both cases, the changes have been instant.\u2026But what if we want to slow them down\u2026and show the change in progress?\u2026Changing an elements size or color instantly\u2026can confuse your user.\u2026They might doubt that there had been a change at all.\u2026Perhaps the page just jumped.\u2026Maybe that bar chart was always that height.\u2026Changing an elements size slowly\u2026leaves the user in no doubt\u2026there is a change happening and it is intentional.\u2026It can also look more sophisticated and professional,\u2026or it can help you to draw attention\u2026to one particular aspect of your graphic.\u2026\t\t\n\t\t\nYou can use transitions to run a movie\u2026or work in an infinite loop.\u2026As here, you can even make a polar clock.\u2026Transitions change some of aspect of an element\u2026over time rather than instantly.\u2026Any attribute that can be set in D3 can be changed\u2026slowly with a transition.\u2026So let's change our Voronoi diagram\u2026and make our polygon go blue slowly rather than instantly.\u2026At its most basic, we just insert the word transition.\u2026"
                },
                {
                    "title": "Dragging and zooming",
                    "transcript": "- [Instructor] I want to introduce you to a couple\u2026of other methods that D3 offers\u2026and that is zoom and drag.\u2026So I've just zoomed out all the way\u2026on Mike Bostock's Block here.\u2026Now I'm going to zoom all the way in\u2026and note that we can't go to infinity and zero\u2026in either direction on this block anyway.\u2026And I can also drag my graphic around the screen.\u2026And we're going to add some of these behaviors\u2026to our Voronoi diagram.\u2026So the first thing that we need to do\u2026is to add a chart group to our S-V-G.\u2026Well, you can call the variable anything actually,\u2026but we're adding a group to our S-V-G\u2026and the reason for that will become clear shortly.\u2026\t\t\n\t\t\nSo now we just replace S-V-G with chart group like so.\u2026And I just noticed that they're logging something\u2026to the console there that we don't need.\u2026So we can take that out and save.\u2026And then if we refresh on our Voronoi diagram,\u2026it should look exactly the same as it did before.\u2026I mean, actually, the DOM will be slightly different\u2026because we're adding everything into a group now\u2026where we were adding it directly to the S-V-G before,\u2026"
                }
            ]
        },
        {
            "title": "10. Picking the Right Graphic",
            "sections": [
                {
                    "title": "Picking the right graphic for your data",
                    "transcript": "- [Narrator] In this chapter, I'm going to run through\u2026some approaches for picking the best graphic for your data.\u2026I've grouped the charts together by data type.\u2026We're going to look at Time Series data first,\u2026then Text, Hierarchical data, Geographic data,\u2026Distribution data, and finally an Other category\u2026to cover the last key chart types.\u2026"
                },
                {
                    "title": "Time series",
                    "transcript": "- [Narrator] When presented with a data set,\u2026the first question is always,\u2026do you have a time series, and do you want to show it?\u2026If the answer is yes, the next question is,\u2026what type of data do you want to show over time?\u2026Is it numeric, geographic, or text?\u2026We're going to cover geographic and text data\u2026in the next sections, but if it's numeric data,\u2026you can ask yourself some more questions to help\u2026narrow down the appropriate charts.\u2026The first is, whether your time periods\u2026are continuous or discrete.\u2026An example of discrete data would be a closing price,\u2026where the price has actually been changing all day long,\u2026or a snapshot of turnover for a company,\u2026taken on just the first day of the month.\u2026\t\t\n\t\t\nLet's say turnover is 100 on the first of August,\u2026and 120 on the first of September.\u2026To show that as a line chart would be an upward sloping line\u2026with two points.\u2026But actually there were 30 data points here,\u2026and you're just showing two of them.\u2026Turnover on August the second, August the third, and so on,\u2026might have been lower than 100.\u2026"
                },
                {
                    "title": "Text",
                    "transcript": "- [Narrator] Now what if you have non-numeric data?\u2026You might be interested in how often certain words occur\u2026in a passage of text.\u2026Now you could count up the occurrences\u2026and show them as a bar chart,\u2026but you do have other options.\u2026For example, you could use a word cloud using a D3 plugin.\u2026And if you had time series data, you could just animate it.\u2026How about a completely different kind of text data?\u2026Corporations often store masses of text data\u2026they don't analyze.\u2026For example, imagine you've got staff names stored\u2026against project name.\u2026They're both text fields.\u2026\t\t\n\t\t\nIt's hard to visualize that in a bar chart,\u2026but using a co-occurrence matrix, you can show density\u2026of occurrence with depth of color.\u2026You could also use different types of color\u2026to show different types of project.\u2026There's an awful lot you can do with a co-occurrence matrix,\u2026and of course, you can animate it over time.\u2026And if your text data are actually showing relationships,\u2026you might want to use something like a chord diagram.\u2026Let's say you've got some unstructured data,\u2026"
                },
                {
                    "title": "Hierarchy",
                    "transcript": "- [Instructor] One type of text data we've seen a lot of\u2026in this course is hierarchical data.\u2026D3 is great at visualizing hierarchy.\u2026A lot of operational data is hierarchical:\u2026staff structures, processes, systems and files.\u2026It's a type of data that's often implicit,\u2026but D3 gives us ways of making it explicit.\u2026And as normal, we have flat or radial options in D3.\u2026If you have size or value data associated with your\u2026hierarchy, you might want to use a partition layout.\u2026In a flat partition layout, the size of the rectangle\u2026represents a value.\u2026\t\t\n\t\t\nYou read this diagram from left to right,\u2026so on the left-hand side of the parent items.\u2026And as you read horizontally across, you see child items\u2026and then grandchildren and so on.\u2026It's really easy to add text with a partition layout.\u2026For me personally I find that this layout doesn't work well,\u2026but the related sunburst diagram can work very well.\u2026A sunburst diagram is a circular partition layout,\u2026where the parent items are in the center, and children\u2026are placed in ever further arcs away from the center.\u2026"
                },
                {
                    "title": "Geography",
                    "transcript": "- [Instructor] Geographic data probably needs\u2026the least introduction.\u2026If you have regional numeric data,\u2026you're probably looking for a heat map.\u2026The proper name for this type\u2026of colored regional map is choropleth.\u2026If you have data about locations rather than regions,\u2026you might want a spot map.\u2026You can easily make the spots different sizes and colors\u2026to indicate a value, making a bubble map,\u2026or you can use icons and symbols\u2026to make your map more relevant to a particular topic.\u2026And you can use arcs or lines to indicate some kind of flow.\u2026If you have geographic data,\u2026the best advice I can give you is\u2026to consider ignoring the geographic element entirely.\u2026\t\t\n\t\t\nIt does sound a bit radical,\u2026but sometimes we don't need to know the actual location\u2026of something, even though we have the data.\u2026Take a supply chain, for example.\u2026Do we need to see where in the world our parcel is?\u2026Or do we just need to know what stage\u2026in the process the parcel has reached?\u2026In a similar vein,\u2026if you want to compare data for five locations,\u2026sometimes a bar chart will do the job better,\u2026"
                },
                {
                    "title": "Distribution",
                    "transcript": "- [Instructor] If you're a statistician,\u2026you'll be familiar with distribution data.\u2026There are three standard charts to show distribution.\u2026Histograms are the first port of call.\u2026They group each data point into buckets, or ranges,\u2026and use bars to show how many data points\u2026fell into each bucket.\u2026Boxplots are a great way to compare distributions.\u2026A standard boxplot shows you the five data points\u2026about your distribution: min and max,\u2026the interquartile range, and the median, or midpoint.\u2026Looking at a boxplot is a bit like\u2026looking at a histogram from above,\u2026sort of a bird's eye view.\u2026\t\t\n\t\t\nYou can see if the distribution is normal,\u2026or skewed, or got a long tail.\u2026And you can see how spread out your results are,\u2026just as you can with a histogram.\u2026A word of caution with boxplots though:\u2026they can take a bit of explaining\u2026the first time people see them.\u2026The last remaining typical chart here is the scatterplot.\u2026Here you show your results directly\u2026against two numeric axes.\u2026Scatterplots are often used to show regression data,\u2026and you can add a line of best fit, an R-squared,\u2026"
                },
                {
                    "title": "Other",
                    "transcript": "- [Narrator] There are a few categories of charts left\u2026worth mention.\u2026These are relationship charts, physical simulations,\u2026and flow.\u2026Many of the charts we've already seen\u2026can be used across different categories.\u2026For example, we've already seen graphics\u2026that do a great job of showing relationships.\u2026Scatterplots, for example, show relationships\u2026between two or more variables.\u2026Chord diagrams show the size of a relationship\u2026between members of a team or group\u2026and you can use a diagram to show the existence\u2026of a relationship, even where you have no\u2026numeric data to go with it.\u2026\t\t\n\t\t\nThen we have spacial diagrams,\u2026often showing simulation data.\u2026A good example of this is force directed graphics\u2026where you set settings such as gravity,\u2026charge and distance.\u2026D3 tries to position all the nodes\u2026in the most aesthetically pleasing way.\u2026One practical implementation of this is\u2026the network diagram where you might show\u2026links between personal computers,\u2026servers and a router.\u2026"
                }
            ]
        },
        {
            "title": "Conclusion",
            "sections": [
                {
                    "title": "Further resources",
                    "transcript": "- [Narrator] So, now we've got some D3 skills\u2026under our belts,\u2026I want to share with you some resources\u2026to help you take your learning forward.\u2026We're going to look at some plugins available to you\u2026first of all,\u2026and then we're gonna take a look at the D3 API,\u2026and finally we'll look at some other tools\u2026that you can use together with D3.\u2026"
                },
                {
                    "title": "Finding plugins",
                    "transcript": "- [Narrator] In an earlier chapter,\u2026we saw a hex bin graphic like this one\u2026made with D3.\u2026It required an extra file, as well as our D3 file.\u2026And here it is, so there's our D3 file\u2026being pulled in, or their D3 file to be fair,\u2026different from our one.\u2026And here's the hex bin file that's being pulled in as well.\u2026The extra file adds functionality to the core D3.\u2026Do be aware when you look up plugins,\u2026many of them are still going to be version three,\u2026and they won't work with your version four D3 file.\u2026So this example that we're looking at is version four.\u2026\t\t\n\t\t\nYou can see that you pull the plugin file in,\u2026in exactly the same way that you pull in the D3 file.\u2026And now, in the code,\u2026you can use this new command, D3_hexbin.\u2026Now that command might look a bit odd,\u2026because it's D3_hexbin instead of D3.hexbin,\u2026which is the format that's been taken up until now.\u2026And the reason for this is that the naming convention\u2026can be really quite different with plugins.\u2026Basically, the author defines their own terminology,\u2026and you have to look at an example\u2026"
                },
                {
                    "title": "Using the API reference",
                    "transcript": "- [Instructor] D3 currently has two API references.\u2026One each for versions three and four.\u2026Do make sure you're looking at the right one.\u2026This is our one here.\u2026The naming convention for documentation\u2026is to include clear references up in this URL\u2026when you're looking at version 3\u2026but to make no mention of version 4.\u2026So if version isn't mentioned,\u2026you're probably looking at the latest version.\u2026So if we look in the API,\u2026hopefully some of the links in blue\u2026look familiar to you by now.\u2026This bullet list here is a bit like a contents list.\u2026\t\t\n\t\t\nClicking on a link keeps you on the same page\u2026but moves you to the right location.\u2026If you then hover over an example,\u2026you can see the URL in bottom left\u2026changes from API.md to README.md.\u2026So these links here in the main body of the page\u2026take you to a new page and load new content.\u2026You'll be able to see some things here\u2026that we haven't covered; shuffle, commute, bisect.\u2026D3 is huge and very powerful,\u2026and it's a really good idea to check the API reference\u2026when you get stuck on something\u2026or start trying to code something involved.\u2026"
                },
                {
                    "title": "Using D3 with other libraries",
                    "transcript": "- [Instructor] D3 is one of thousands\u2026of JavaScript libraries,\u2026and there are a few worth highlighting.\u2026The first is NVD3, which is a project\u2026to build reusable charts in D3\u2026so that your code is a lot simpler\u2026for common charts like these ones.\u2026Next up there's Crossfilter.\u2026Crossfilter is a bit like\u2026the dispatch function we saw earlier.\u2026It coordinates events to help manage a dashboard\u2026update all its charts together following user interaction.\u2026Here we drag one element, and all the other elements update.\u2026\t\t\n\t\t\nThen there's dc, which essentially blends D3\u2026with Crossfilter in one package.\u2026Here we click on one element,\u2026making all the other elements update.\u2026For all you statisticians out there who are using R,\u2026there's also a new framework available called R Shiny,\u2026which basically puts R on the web.\u2026If that weren't amazing enough,\u2026R Shiny can work with D3 charts\u2026to help you present your stats in new and different ways.\u2026And finally, you can increasingly use D3 with some software.\u2026Microsoft Power BI is a business intelligence system,\u2026"
                },
                {
                    "title": "Summary",
                    "transcript": "- [Instructor] I really hope you found this course\u2026a useful introduction to d3.\u2026I've had a lot of fun building it.\u2026If you like you can check out some of my d3 blocks\u2026here at bl.ocks.org/emmasaunders,\u2026although do beware a lot of them at the moment\u2026are in version three.\u2026And for more examples of my work\u2026you can check out my website.\u2026"
                }
            ]
        }
    ]
}